* 22.05.23
* made by 대상추
* MyCi_1 project : board 
*
* https://palpit.tistory.com/entry/CodeIgniter-2-CodeIgniter-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1?category=848182
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. 데이터베이스 설정하기
(1) MySQL에 todo 데이터베이스 생성, items 테이블 생성
    (cmd로 생성하기)
    cd \
    cd xampp
    cd mysql
    cd bin
    mysqladmin -uroot -p create todo
    mysql -uroot -p todo

    create table items (
    id INT(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    content VARCHAR(200) NULL,
    created_on DATE NULL,
    due_date DATE NULL,
    used INT(1) NOT NULL DEFAULT 1
    );

    INSERT INTO items(content, created_on, due_date) VALUES('미팅', '2015-08-11', '2015-08-12');
    INSERT INTO items(content, created_on, due_date) VALUES('스터디', '2015-08-13', '2015-08-15');

(2) application/config/database.php에서 사용자, 비번, host, db명을 입력한다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2. list 만들기
(1) 컨트롤러에서는 조회, 목록, 쓰기, 삭제 등의 액션을 제어한다.
(2) 목록 함수의 경우 목록컨트롤러에서 모델을 호출하여 DB의 해당 내용을 가지고 온 뒤 뷰에 전달하여 화면을 출력하도록 한다.
(3) 파일명과 클래스명은 동일해야 한다.
(4) 모델에서 데이터를 가지고 오도록 쿼리문을 작성한다. 모델은 필요한 데이터만 반환한다.
(5) 모델에서 반환할 데이터를 뷰에서 출력한다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3. 보기 만들기
    - todo 내용 보기를 만들어보자. main 컨트롤러에 view()함수와 소스를 추가한다.
    - todo_m 모델에 get_view() 함수의 소스 추가
    - 뷰를 만든다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4. 쓰기 만들기
    - 컨트롤러-뷰-컨트롤러-모델-뷰 형태로 나타난다.
(1) main 컨트롤러에 write() 입력
    - L37 : 쓰기 함수는 $_POST의 유무에 따라 if-else문 분기하여 처리한다.
            post 전송이 없을 경우(쓰기 주소로 접속했을 때) else 구문 실행 -> 입력받는 폼 화면에 출력.
    - L38 : 쓰기 화면에서 내용을 채우고 작성 버튼을 클릭하면 if 문 액션이 실행됩니다. 
            $this->input->post('content')는 $_POST['content']와 동일하게 post 변수를 받아주는 역할을 합니다. 
            post 함수의 두 번째 파라미터에 TRUE를 주었을 때 XSS 공격을 막을 수 있게 자동으로 처리합니다.
    - L44 : post 전송받은 데이터를 todo_m 모델의 insert_todo() 함수에 전달하여 데이터베이스에 입력합니다.
(2) 모델
    - write 모델 함수는 반환 부분은 없고 데이터를 입력한 후 완료 된다.
(3) 뷰를 만든다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
5. delete 만들기
    - 삭제는 뷰에서 삭제를 전담하는 컨트롤러의 delete() 함수를 호출하여 DB에서 내용을 삭제하고 목록으로 이동한다.
    - 컨트롤러와 모델에서 각각 삭제 함수를 만들면 간단하게 끝//
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
6. 주소 줄이기
(1) 직관적이고 깔끔한 URL을 위해 진행한다.
(2) http://localhost/todo/index.php/main/view/1와 같은 형태에서
    사용자 입장에서 별 의미 없는 index.php를 지워보도록 한다.
(3) xampp/apache/conf/httpd.conf 파일을 연다.
(4) LoadModule rewrite_module modules/mod_rewrite.so를 찾아서 주석을 제거하고 아파치를 재시작한다.
(5) 서버 디렉터리의 AllowOverride 설정 부분을 All로 바꿔준다.
    <Directory />
    AllowOverride none -> All
    Require all denied
    </Directory>
(6) 이제, CI의 설정파일과 .htaccess 파일을 수정하도록 한다.
(7) config폴더 -> config.php -> $config['index_page'] = 'index.php';에서 index.php를 지우고 ''로 변경한다.
(8) 에디터에서 todo 디렉터리에 .htaccess 파일을 만들고 다음 소스를 입력한다.
    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteCond $1 !^(index\.php|images|captcha|data|application|include|uploads|robots\.txt)
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.*)$ /todo/index.php/$1 [L]
    </IfModule>
(9) 저장 후 localhost/todo/main/lists/를 입력하여 확인해보자.
####
    나는 xampp의 htdocs 경로가 아닌 workspace의 프로젝트여서 그런지 확인할 수 없다. 아파치의 경로대로 시작했다면 될지도 모르겠다.
    (번거롭더라도 index.php를 경로로 반드시 붙여줘야 로드가 된다.)
####
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
7. 게시판 테이블 만들기
(1) cmd명령어로 DB 생성
    cd \
    cd xampp
    cd mysql
    cd bin
    mysqladmin -uroot -p create ci_book
    mysql -uroot -p ci_book
    grant select, insert, update, delete, create, alter, drop on ci_book .* to 'book_user'@'localhost' identified by 'book_password';

(2) tbl생성
    use ci_book
    CREATE TABLE ci_board (
    board_id int(10) NULL AUTO_INCREMENT PRIMARY KEY,
    board_pid int(10) NULL DEFAULT 0 COMMENT '원글 번호',
    user_id varchar(20) COMMENT '작성자ID',
    user_name varchar(20) NOT NULL COMMENT '작성자 이름',
    subject varchar(50) NOT NULL COMMENT '게시글 제목',
    contents text NOT NULL COMMENT '게시글 내용',
    hits int(10) NOT NULL DEFAULT 0 COMMENT '조회수',
    reg_date datetime NOT NULL COMMENT '등록일',
    INDEX board_pid (board_pid)
    )
    COMMENT='CodeIgniter 게시판'
    COLLATE='utf8_general_ci'
    ENGINE=MyISAM;

    show tables;
    desc ci_board;
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
8. 목록보기 기능 만들기
(1) 7.에서 만든 테이블에 가상 데이터를 넣고 그 내용을 불러오는 프로그램을 만들어보자
    INSERT INTO ci_board(user_id, user_name, subject, contents, hits, reg_date) 
    VALUES ('advisor', 'Palpit', 'First Note', 'Test', 0, '2022-05-23 16:49:00');
    (여러개 생성하면 된다.)
    select*from ci_board;로 확인
(2) 가상데이터를 불러올 소스 코드를 작성 한다. 컨트롤러부터 작업한다.
    (todo 프로젝트와 마찬가지로 MyBoard폴더를 생성하여 CI를 복사해서 환경을 구성한다.)
(3) 컨트롤러에서 테이블의 데이터를 불러올 메서드를 작성한다.
(4) 모델을 이용하려면 DB에 연결을 해야 한다. database.php에 가서 db생성시 부여했던 정보를
    입력한다.
(5) 모델에서 데이터를 가져올 쿼리문을 작성한다.
(6) 뷰를 작성한다. 헤더와 푸터는 CI의 _remap()를 이용해 자동으로 선언한다.
    따라서 뷰는 헤더와 푸터를 제외한 컨텐츠만 들어간다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
9. 페이징 만들기
* 페이징은 과정이 복잡하고 이해하기 어려울 수 있지만 정형화된 형태라서
    재사용이 쉽다.
(1) 메인 컨트롤러의 목록 불러오기를 수정한다.
(2) 모델 함수에서 페이징 함수를 작성한다.
    * 쿼리문 오류에 주의!
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
10. 검색 만들기
* 뷰에서 검색어를 컨트롤러에 전송하고, 컨트롤러는 검색어를 처리해서 모델을 통해
    데이터를 가져와서 다시 뷰에 전달하고 화면에 출력한다.
(1) 뷰에서 검색 기능 작성
    - L12 : id가 search_btn인 부분을 클릭했을 때 function 부분을 실행하라는 의미
    - L13 : 검색어 입력 없이 검색 버튼을 눌렀을 때 경고창을 띄워주는 부분
    - L17 : Form 전송의 action 부분을 만들어 주는 것으로 이 부분을 이용하지 않을 경우
            검색 후, 첫 번째 페이지에는 검색어가 적용된 게시물 목록이 뜨는데 2페이지, 3페이지 등
            페이지를 이동한 경우에는 검색된 결과가 아닌 일반 게시물 목록을 불러온다.
    - L18 : id가 bd_search 부분의 action 속성(attribute)으로 지정되고, 바로 submit 액션이 발생한다.
(2) 컨트롤러
    - L42 : 컨트롤러 내부에서 사용하는 변수 초기화.
            $uri_segment 변수는 페이징 시 몇 번째 세그먼트가 실제 페이지 수인지
            pagination 라이브러리에 알려준다.
    - L45 : 주소의 세그먼트를 배열로 만들어주는 부분. 세그먼트를 배열에 담아
    배열 검색을 통해 주소에 검색어가 포함되어 있는지 검출할때 사용
(3) 모델
    - L12 : 맨 마지막에 거맥어가 다섯 번째 파라미터로 추가되었다.
    - L16 : 검색어가 있을 경우 $sword 변수에 검색 쿼리를 넣어준다. 
            이 소스에서는 검색어 구분없이 하나의 단어가 넘어 왔을 경우 제목과 글 내용에서 모두 찾을 수 있도록 되어있다.
    - L29 : 중간에 $sword 추가. 
            검색어가 있을 경우 'WHERE subejct like "%검색어%" or contents like "%검색어%" 라는 WHERE 절이 포함.
* 모델의 $sql문 오류로 검색기능 활용 불가
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
11. 보기 기능 추가(detail view)
(1) 컨트롤러에 view 함수를 추가한다.
    - L131 : board_m 모델에서 get_view 함수를 실행하여 데이터를 가져온다.
            첫 번째 파라미터에 게시판 이름, 두 번째에 가져올 게시물의 번호를 넘겨준다.
            가져온 데이터를 $data['views'] 배열에 담는다.
(2) 모델에서 조회수 증가와 함께 저장된 데이터를 불러올 쿼리를 작성한다.
(3) 뷰를 새로 만들어준다. view_v.php는 상세보기로서 동작한다.
    * 경로 설정시 반드시 폴더명/index.php/~.. 를 해줘야 정상적으로 나타난다.
    - L55 : 첫 번째 라인에는 제목($views->subject)과 이름, 조회수, 등록일을 보여준다. 
            컨트롤러에서 $data['views'] 변수에 게시물 상세 내용을 담았고, view에는 $data 변수 전체를 넘겼다. 
            이것은 view에 하나의 데이터가 아닌 여러 개의 데이터를 넘기기 위해 배열 형태로 넘기는 것이다.
    - L72 : 목록, 수정, 삭제 쓰기 액션을 모아놓은 라인. 
            segment 3은 게시판 테이블 명이고, segment 5는 게시물 번호, segment 7은 페이지 수//
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
12. 입력기능 추가
    - 폼 전송을 이용해 데이터를 전달하는 방법과 JQuery를 이용해 전송시 빈 값을 체크하는 방법을 알아보자!
(1) 컨트롤러
    - L161 : DB에 넣을 값을 배열로 만든다. "DB필드명" => "넣을 값" 형태이다.
    - L167 : board_m 모델의 insert_board 함수에 L161에서 만든 배열을 전달하여 데이터베이스를 입력하고, 그 결과를 돌려받는다.

*board.php에서 alert 헬퍼를 사용하기 때문에 alert_helper.php를 작성해야 한다.

(2) 헬퍼
    - 이번 입력 부분에서 컨트롤러의 새로운 형태가 나왔다. 뷰를 보여주는 부분과 글 입력 액션 부분이 하나의 컨트롤러에 있고 POST 전송 값 여부에 따라 분기한다. 
    - 실무에서 자주 사용하는 형태 중 하나. 지금까지는 컨트롤러의 메서드에서 분기 없이 변수 처리, 모델 호출, 뷰 형태이다.

(3) 모델
    - 입력은 간단하며, 컨트롤러에는 로그인 여부와 권한 체크가 있다.
    - 게시판을 만들 때 읽기, 쓰기, 수정, 삭제에 대한 권한을 준다.
    - 보통 읽기는 아무나 가능하고 쓰기는 로그인 한 사람에게만 주고, 수정/삭제는 글쓴이 본인에게만 권한을 준다.
(4) 뷰 - 생략
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
13. 수정 기능
    - 


